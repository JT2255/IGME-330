{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://trovato-j-hw3-refactor/./src/utils.ts","webpack://trovato-j-hw3-refactor/./src/enums/audio-defaults.enum.ts","webpack://trovato-j-hw3-refactor/./src/audio.ts","webpack://trovato-j-hw3-refactor/./src/classes/RocketSprite.ts","webpack://trovato-j-hw3-refactor/./src/canvas.ts","webpack://trovato-j-hw3-refactor/./src/enums/main-defaults.enum.ts","webpack://trovato-j-hw3-refactor/./src/main.ts","webpack://trovato-j-hw3-refactor/./src/loader.ts"],"sourcesContent":["const makeColor = (red : number, green : number, blue : number, alpha : number = 1) => {\r\n  return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min : number, max : number) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n\r\nconst getRandomColor = () => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = () => getRandom(floor, 255 - floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\nconst getLinearGradient = (ctx : CanvasRenderingContext2D, startX : number, startY : number, endX : number, endY : number, colorStops) => {\r\n  let lg = ctx.createLinearGradient(startX, startY, endX, endY);\r\n  for (let stop of colorStops) {\r\n    lg.addColorStop(stop.percent, stop.color);\r\n  }\r\n  return lg;\r\n};\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element : any) => {\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  } else if (element.mozRequestFullscreen) {\r\n    element.mozRequestFullscreen();\r\n  } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n    element.mozRequestFullScreen();\r\n  } else if (element.webkitRequestFullscreen) {\r\n    element.webkitRequestFullscreen();\r\n  }\r\n  // .. and do nothing if the method is not supported\r\n};\r\n\r\nexport { makeColor, getRandomColor, getLinearGradient, goFullscreen, getRandom };","export enum DEFAULTS {\r\n    gain = .5,\r\n    numSamples = 256,\r\n}","import { DEFAULTS } from \"./enums/audio-defaults.enum\";\r\n\r\n// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx : AudioContext;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element : HTMLAudioElement, sourceNode : MediaElementAudioSourceNode, analyserNode : AnalyserNode, gainNode : GainNode, \r\nbiquadFilter : BiquadFilterNode, lowshelfBiquad : BiquadFilterNode, distortionFilter : WaveShaperNode;\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setupWebaudio = (filePath : string) => {\r\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2 - this creates an <audio> element\r\n    element = new Audio();\r\n\r\n    // 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // 5 - create an analyser node  \r\n    analyserNode = audioCtx.createAnalyser(); // note the UK spelling of \"Analyser\"\r\n\r\n    /*\r\n    // 6\r\n    We will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally \r\n    across the sound spectrum.\r\n\r\n    If DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz, \r\n    the third is 344Hz, and so on. Each bin contains a number between 0-255 representing \r\n    the amplitude of that frequency.\r\n    */\r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    biquadFilter = audioCtx.createBiquadFilter();\r\n    biquadFilter.type = \"highshelf\";\r\n    biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n    biquadFilter.gain.setValueAtTime(15, audioCtx.currentTime);\r\n\r\n    lowshelfBiquad = audioCtx.createBiquadFilter();\r\n    lowshelfBiquad.type = \"lowshelf\";\r\n    lowshelfBiquad.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n    lowshelfBiquad.gain.setValueAtTime(0, audioCtx.currentTime);\r\n\r\n    distortionFilter = audioCtx.createWaveShaper();\r\n\r\n    // 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(biquadFilter);\r\n    biquadFilter.connect(lowshelfBiquad);\r\n    lowshelfBiquad.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(distortionFilter);\r\n    distortionFilter.connect(audioCtx.destination);\r\n}\r\n\r\nconst loadSoundFile = (filePath : string) => {\r\n    element.src = filePath;\r\n}\r\n\r\nconst playCurrentSound = () => {\r\n    element.play();\r\n}\r\n\r\nconst pauseCurrentSound = () => {\r\n    element.pause();\r\n}\r\n\r\nconst setVolume = (value : number) => {\r\n    value = Number(value); // make sure that it's a Number rather than a String\r\n    gainNode.gain.value = value;\r\n}\r\n\r\nexport { audioCtx, setupWebaudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, analyserNode, biquadFilter, lowshelfBiquad, distortionFilter };","\r\nlet rocketImg : HTMLImageElement = new Image();\r\nrocketImg.src = \"media/rocketship.png\"\r\n\r\nimport { canvasHeight, canvasWidth } from \"../canvas\";\r\nimport * as utils from '../utils';\r\n\r\n//class for rockets\r\nexport class RocketSprite {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    up: boolean;\r\n    speed: number;\r\n    scale: number;\r\n\r\n    constructor(x : number, y : number, width : number, height : number, up : boolean, scale : number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.up = up;\r\n        this.speed = 1;\r\n        this.scale = scale;\r\n    }\r\n\r\n    //update rocket position and loop around screen if it hits the border\r\n    update() {\r\n        if (this.up) {\r\n            this.y -= 1 * this.speed;\r\n\r\n            if (this.y < -50) {\r\n                this.y = canvasHeight + utils.getRandom(0, 50);\r\n                this.x = utils.getRandom(50, canvasWidth - 50);\r\n                this.speed = utils.getRandom(1, 2);\r\n            }\r\n        }\r\n        else {\r\n            this.y -= 1 * this.speed;\r\n\r\n            if (this.y < -canvasWidth - 50) {\r\n                this.y = 50 - utils.getRandom(0, 50);\r\n                this.x = utils.getRandom(50, canvasHeight - 50);\r\n                this.speed = utils.getRandom(1, 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    //draw rocket each frame\r\n    draw(ctx) {\r\n        if (this.up) {\r\n            if (this.scale > 1) {\r\n                ctx.save();\r\n                ctx.drawImage(rocketImg, this.x - 1, this.y, this.width * this.scale, this.height * this.scale);\r\n                ctx.restore();\r\n            }\r\n            else {\r\n                ctx.save();\r\n                ctx.drawImage(rocketImg, this.x, this.y, this.width * this.scale, this.height * this.scale);\r\n                ctx.restore();\r\n            }\r\n\r\n        }\r\n        else {\r\n            if (this.scale > 1) {\r\n                ctx.save();\r\n                ctx.rotate(Math.PI / 2);\r\n                ctx.drawImage(rocketImg, this.x - 1, this.y, this.width * this.scale, this.height * this.scale);\r\n                ctx.restore();\r\n            }\r\n            else {\r\n                ctx.save();\r\n                ctx.rotate(Math.PI / 2);\r\n                ctx.drawImage(rocketImg, this.x, this.y, this.width * this.scale, this.height * this.scale);\r\n                ctx.restore();\r\n            }\r\n\r\n        }\r\n    }\r\n}","/*\r\n    The purpose of this file is to take in the analyser node and a <canvas> element: \r\n      - the module will create a drawing context that points at the <canvas> \r\n      - it will store the reference to the analyser node\r\n      - in draw(), it will loop through the data in the analyser node\r\n      - and then draw something representative on the canvas\r\n      - maybe a better name for this file/module would be *visualizer.js* ?\r\n*/\r\n\r\nimport * as utils from './utils';\r\nimport { highshelf } from './main';\r\nimport * as rocket from './classes/RocketSprite'\r\nimport { DrawParams } from 'interfaces/drawParams.interface';\r\n\r\nlet ctx : CanvasRenderingContext2D, canvasWidth : number, canvasHeight : number, gradient : CanvasGradient, analyserNode : AnalyserNode, audioData;\r\nlet rockets : Array<rocket.RocketSprite> = [], rocketImg : HTMLImageElement = new Image(), counter : number;\r\n\r\n\r\nconst setupCanvas = (canvasElement : HTMLCanvasElement, analyserNodeRef : AnalyserNode) => {\r\n    // create drawing context\r\n    ctx = canvasElement.getContext(\"2d\");\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n    // create a gradient that runs top to bottom\r\n    gradient = utils.getLinearGradient(ctx, 0, 0, 0, canvasHeight, [{ percent: 0, color: \"skyblue\" }, { percent: 1, color: \"lightpink\" }]);\r\n    // keep a reference to the analyser node\r\n    analyserNode = analyserNodeRef;\r\n    // this is the array where the analyser data will be stored\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n\r\n    rockets.push(new rocket.RocketSprite(utils.getRandom(50, 250), canvasHeight + utils.getRandom(0, 100), 30, 40, true, 1));\r\n    rockets.push(new rocket.RocketSprite(utils.getRandom(500, 750), canvasHeight, 30, 40, true, 1));\r\n    rockets.push(new rocket.RocketSprite(utils.getRandom(50, 150), 0 + utils.getRandom(0, 100), 30, 40, false, 1));\r\n    rockets.push(new rocket.RocketSprite(utils.getRandom(400, 550), 0, 30, 40, false, 1));\r\n    rocketImg.src = \"./media/rocketship.png\";\r\n}\r\n\r\nconst draw = (params:DrawParams) => {\r\n    if (params.useWaveform) {\r\n        analyserNode.getByteTimeDomainData(audioData); // waveform data\r\n    }\r\n    else {\r\n        analyserNode.getByteFrequencyData(audioData); // frequency data\r\n    }\r\n\r\n    // 2 - draw background\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .1;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    // 3 - draw gradient\r\n    if (params.showGradient) {\r\n        ctx.save();\r\n        ctx.fillStyle = gradient;\r\n        ctx.globalAlpha = .3;\r\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n        ctx.restore();\r\n    }\r\n\r\n    // 4 - draw bars\r\n    if (params.showBars) {\r\n        let barSpacing = 4;\r\n        let barWidth = 10;\r\n        let barHeight = 150;\r\n        counter = 0\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.50)';\r\n        ctx.strokeStyle = 'rgba(0, 0, 0, 0.50)';\r\n        ctx.save();\r\n        ctx.translate(canvasWidth / 2 + 3, canvasHeight / 2 - 71);\r\n\r\n        for (let b of audioData) {\r\n            let percent = b / 255;\r\n            if (percent < .01) percent = .01;\r\n            counter += percent;\r\n            ctx.translate(barSpacing, 0);\r\n            ctx.rotate(Math.PI * 2 / 32);\r\n            ctx.save();\r\n            ctx.scale(1, -1);\r\n            ctx.fillStyle = `rgb(${b}, ${b}, ${b})`;\r\n            ctx.fillRect(0, 0, barWidth, barHeight * percent);\r\n            ctx.restore();\r\n            ctx.translate(barWidth, 0);\r\n        }\r\n\r\n        ctx.restore();\r\n\r\n        //when the percent of all of the data is higher than a specific amount, increase size of rockets\r\n        //typically makes rockets larger on drum beats\r\n        if (highshelf) {\r\n            if (counter > 30) {\r\n                for (let r of rockets) {\r\n                    r.scale = 1.1;\r\n                }\r\n            }\r\n            else {\r\n                for (let r of rockets) {\r\n                    r.scale = 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (counter > 15) {\r\n                for (let r of rockets) {\r\n                    r.scale = 1.1;\r\n                }\r\n            }\r\n            else {\r\n                for (let r of rockets) {\r\n                    r.scale = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 5 - draw circles\r\n    if (params.showCircles) {\r\n        let maxRadius = canvasHeight / 4;\r\n\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            let percent = audioData[i] / 255;\r\n            let circleRadius = percent * maxRadius;\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(255, 255, 255, .02);\r\n            ctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n}\r\n\r\nexport { setupCanvas, draw, rockets, ctx, canvasHeight, canvasWidth };","export enum DEFAULTS {\r\n    sound1 = \"media/Many Moons.mp3\"\r\n  }","/*\r\n  main.js is primarily responsible for hooking up the UI to the rest of the application \r\n  and setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './canvas';\r\nimport { DEFAULTS } from './enums/main-defaults.enum';\r\n\r\nconst drawParams = {\r\n  showGradient: true,\r\n  showBars: true,\r\n  showCircles: true,\r\n  useWaveform: true\r\n};\r\n\r\nlet highshelf : boolean, lowshelf : boolean, distortion : boolean, distortionAmount : number = 20, rocketDraw : boolean, fps : number = 60, gradientCheckbox : HTMLInputElement,\r\nbarCheckbox : HTMLInputElement, circleCheckbox : HTMLInputElement, highshelfCheckbox : HTMLInputElement, lowshelfCheckbox : HTMLInputElement, distortionCheckbox : HTMLInputElement,\r\nrocketCheckbox : HTMLInputElement, waveformCheckbox : HTMLInputElement, distortionSlider : HTMLInputElement;\r\n\r\ngradientCheckbox = document.querySelector(\"#cb-gradient\");\r\nbarCheckbox = document.querySelector(\"#cb-bars\");\r\ncircleCheckbox = document.querySelector(\"#cb-circles\");\r\nhighshelfCheckbox = document.querySelector(\"#cb-highshelf\");\r\nlowshelfCheckbox = document.querySelector(\"#cb-lowshelf\");\r\ndistortionCheckbox = document.querySelector(\"#cb-distortion\");\r\ndistortionSlider = document.querySelector(\"#slider-distortion\");\r\nrocketCheckbox = document.querySelector(\"#cb-rockets\");\r\nwaveformCheckbox = document.querySelector(\"#cb-waveform\");\r\ndistortionAmount = Number(distortionSlider.value);\r\n\r\nconst init = () => {\r\n  console.log(\"init called\");\r\n  console.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n  audio.setupWebaudio(DEFAULTS.sound1);\r\n  let canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n  setupUI(canvasElement);\r\n  canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n  loadJsonXHR();\r\n  loop();\r\n}\r\n\r\nconst setupUI = (canvasElement : HTMLCanvasElement) => {\r\n  // A - hookup fullscreen button\r\n  const fsButton : HTMLButtonElement = document.querySelector(\"#btn-fs\");\r\n  const playButton : HTMLButtonElement = document.querySelector(\"#btn-play\");\r\n  \r\n  // add .onclick event to button\r\n  fsButton.onclick = e => {\r\n    console.log(\"goFullscreen() called\");\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n\r\n  // add .onclick event to button\r\n  playButton.onclick = e => {\r\n    const target = e.target as HTMLInputElement;\r\n\r\n    // check is context is in suspended state (autoplay policy)\r\n    if (audio.audioCtx.state == \"suspended\") {\r\n      audio.audioCtx.resume();\r\n    }\r\n\r\n    if (target.dataset.playing == \"no\") {\r\n      // if track is currently paused, play it\r\n      audio.playCurrentSound();\r\n      target.dataset.playing = \"yes\";\r\n    }\r\n    else {\r\n      // if track is playing, pause it\r\n      audio.pauseCurrentSound();\r\n      target.dataset.playing = \"no\";\r\n    }\r\n  };\r\n\r\n  // C - hookup volume slider & label\r\n  let volumeSlider : HTMLInputElement = document.querySelector(\"#slider-volume\");\r\n  let volumeLabel : HTMLSpanElement = document.querySelector(\"#label-volume\");\r\n\r\n  // add .oninput event to slider\r\n  volumeSlider.oninput = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    // set the gain\r\n    audio.setVolume(Number(target.value));\r\n\r\n    // update value of label to match value of slider\r\n    volumeLabel.innerHTML = String(Math.round((Number(target.value) / 2 * 100)));\r\n  };\r\n\r\n  // set value of label to match initial value of slider\r\n  volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n  // D - hookup track <select>\r\n  let trackSelect : HTMLSelectElement = document.querySelector(\"#select-track\");\r\n  // add .onchange event to <select>\r\n  trackSelect.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    audio.loadSoundFile(target.value);\r\n\r\n    // pause the current track if it is playing\r\n    if (playButton.dataset.playing == \"yes\") {\r\n      playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  }\r\n\r\n  gradientCheckbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    if (target.checked) { drawParams.showGradient = true; }\r\n    else { drawParams.showGradient = false; }\r\n  }\r\n\r\n  barCheckbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    if (target.checked) { drawParams.showBars = true; }\r\n    else { drawParams.showBars = false; }\r\n  }\r\n\r\n  circleCheckbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    if (target.checked) { drawParams.showCircles = true; }\r\n    else { drawParams.showCircles = false; }\r\n  }\r\n\r\n  rocketCheckbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    if (target.checked) { rocketDraw = true; }\r\n    else { rocketDraw = false; }\r\n  }\r\n\r\n  waveformCheckbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    if (target.checked) { drawParams.useWaveform = true; }\r\n    else { drawParams.useWaveform = false; }\r\n  }\r\n\r\n  highshelfCheckbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    highshelf = target.checked;\r\n    toggleHighshelf();\r\n  }\r\n\r\n  lowshelfCheckbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    lowshelf = target.checked;\r\n    toggleLowshelf();\r\n  }\r\n\r\n  distortionCheckbox.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    distortion = target.checked;\r\n    toggleDistortion();\r\n  }\r\n\r\n  distortionSlider.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    distortionAmount = Number(target.value);\r\n    toggleDistortion();\r\n  }\r\n\r\n} // end setupUI\r\n\r\nconst loop = () => {\r\n  setTimeout(loop, 1000 / fps);\r\n  canvas.draw(drawParams);\r\n\r\n  if (rocketDraw) {\r\n    for (let r of canvas.rockets) {\r\n      r.update();\r\n      r.draw(canvas.ctx);\r\n    }\r\n  }\r\n}\r\n\r\n//toggles highshelf filter\r\nconst toggleHighshelf = () => {\r\n  if (highshelf) {\r\n    audio.biquadFilter.frequency.setValueAtTime(1000, audio.audioCtx.currentTime);\r\n    audio.biquadFilter.gain.setValueAtTime(15, audio.audioCtx.currentTime);\r\n  }\r\n  else {\r\n    audio.biquadFilter.gain.setValueAtTime(0, audio.audioCtx.currentTime);\r\n  }\r\n}\r\n\r\n//toggles lowshelf filter\r\nconst toggleLowshelf = () => {\r\n  if (lowshelf) {\r\n    audio.lowshelfBiquad.frequency.setValueAtTime(1000, audio.audioCtx.currentTime);\r\n    audio.lowshelfBiquad.gain.setValueAtTime(15, audio.audioCtx.currentTime);\r\n  }\r\n  else {\r\n    audio.lowshelfBiquad.gain.setValueAtTime(0, audio.audioCtx.currentTime);\r\n  }\r\n}\r\n\r\n//toggles distortion filter\r\nconst toggleDistortion = () => {\r\n  if (distortion) {\r\n    audio.distortionFilter.curve = null;\r\n    audio.distortionFilter.curve = makeDistortionCurve(distortionAmount);\r\n  }\r\n  else {\r\n    audio.distortionFilter.curve = null;\r\n  }\r\n}\r\n\r\n//calculates curve for distortion filter\r\nconst makeDistortionCurve = (amount : number = 20) => {\r\n  let n_samples = 256, curve = new Float32Array(n_samples);\r\n\r\n  for (let i = 0; i < n_samples; ++i) {\r\n    let x = i * 2 / n_samples - 1;\r\n    curve[i] = x * Math.sin(x) * amount / 5;\r\n  }\r\n\r\n  return curve;\r\n}\r\n\r\n//loads in ui data from JSON file\r\nconst loadJsonXHR = () => {\r\n  const url = \"data/av-data.json\";\r\n  const xhr = new XMLHttpRequest();\r\n\r\n  xhr.onload = (e) => {\r\n    let json;\r\n    const target = e.target as XMLHttpRequest;\r\n\r\n    console.log(`In onload - HTTP Status Code = ${target.status}`);\r\n\r\n    try {\r\n      json = JSON.parse(target.response);\r\n    }\r\n    catch {\r\n      console.log(\"JSON file error\");\r\n      return\r\n    }\r\n\r\n    const keys = Object.keys(json);\r\n\r\n    //loop through ui elements in JSON file and load their settings\r\n    for (let k of keys) {\r\n      if (k == \"ui\") {\r\n        const obj = json[k];\r\n\r\n        for (let c of obj) {\r\n          switch (c.component) {\r\n            case 'gradient':\r\n              gradientCheckbox.checked = c.value;\r\n              drawParams.showGradient = c.value;\r\n              break;\r\n            case 'bars':\r\n              barCheckbox.checked = c.value;\r\n              drawParams.showBars = c.value;\r\n              break;\r\n            case 'circles':\r\n              circleCheckbox.checked = c.value;\r\n              drawParams.showCircles = c.value;\r\n              break;\r\n            case 'highshelf':\r\n              highshelfCheckbox.checked = c.value;\r\n              highshelf = c.value;\r\n              toggleHighshelf();\r\n              break;\r\n            case 'lowshelf':\r\n              lowshelfCheckbox.checked = c.value;\r\n              lowshelf = c.value;\r\n              toggleLowshelf();\r\n              break;\r\n            case 'distortion':\r\n              distortionCheckbox.checked = c.value;\r\n              distortion = c.value;\r\n              toggleDistortion();\r\n              break;\r\n            case 'rockets':\r\n              rocketCheckbox.checked = c.value;\r\n              rocketDraw = c.value;\r\n              break;\r\n            case 'waveform':\r\n              waveformCheckbox.checked = c.value;\r\n              drawParams.useWaveform = c.value;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  xhr.onerror = (e) => {\r\n    const target = e.target as XMLHttpRequest;\r\n    console.log(`In onerror - HTTP Status Code = ${target.status}`);\r\n  }\r\n\r\n  xhr.open(\"GET\", url);\r\n  xhr.send();\r\n}\r\n\r\nexport { init, highshelf };","import * as main from \"./main\";\r\n\r\nwindow.onload = () => {\r\n\tconsole.log(\"window.onload called\");\r\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\r\n\t// 2 - start up app\r\n\tmain.init();\r\n}"],"names":["DEFAULTS","audioCtx","sourceNode","analyserNode","gainNode","biquadFilter","lowshelfBiquad","distortionFilter","getRandom","min","max","Math","random","loadSoundFile","filePath","src","rocketImg","Image","ctx","canvasWidth","canvasHeight","gradient","audioData","counter","x","y","width","height","up","scale","this","speed","update","draw","save","drawImage","restore","rotate","PI","rockets","highshelf","lowshelf","distortion","rocketDraw","gradientCheckbox","barCheckbox","circleCheckbox","highshelfCheckbox","lowshelfCheckbox","distortionCheckbox","rocketCheckbox","waveformCheckbox","distortionSlider","drawParams","showGradient","showBars","showCircles","useWaveform","distortionAmount","document","querySelector","Number","value","setupUI","canvasElement","fsButton","playButton","onclick","e","element","console","log","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","target","state","resume","dataset","playing","play","pause","volumeSlider","volumeLabel","oninput","gain","innerHTML","String","round","dispatchEvent","Event","onchange","MouseEvent","checked","toggleHighshelf","toggleLowshelf","toggleDistortion","loop","setTimeout","params","getByteTimeDomainData","getByteFrequencyData","fillStyle","globalAlpha","fillRect","strokeStyle","translate","b","percent","maxRadius","i","length","circleRadius","beginPath","alpha","arc","fill","closePath","r","frequency","setValueAtTime","currentTime","curve","makeDistortionCurve","amount","Float32Array","sin","loadJsonXHR","xhr","XMLHttpRequest","onload","json","status","JSON","parse","response","Object","keys","k","c","component","onerror","open","send","window","getByte","AudioContext","sound1","Audio","createMediaElementSource","createAnalyser","fftSize","numSamples","createGain","createBiquadFilter","type","createWaveShaper","connect","destination","analyserNodeRef","getContext","startX","startY","endX","endY","colorStops","lg","createLinearGradient","color","addColorStop","Uint8Array","push"],"sourceRoot":""}